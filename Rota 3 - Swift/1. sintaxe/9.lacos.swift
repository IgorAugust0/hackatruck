/* Para itera√ß√µes em Swift, vamos olhar os comandos while, repeat-while e for. 
Os dois primeiros s√£o utilizados para se iterar at√© que uma condi√ß√£o seja satisfeita, 
enquanto o √∫ltimo √© utilizado para se iterar por cole√ß√µes de dados (Arrays, por exemplo) ou ranges.*/

// Exemplo de do-while: suponha que temos uma fun√ß√£o funcQuePodeRetornarUmInt() que retorne 
// um Int?, ou seja, ela pode retornar um inteiro ou nil. Queremos iterar, chamando-a at√© que
// um inteiro seja de fato retornado

var intOpcional: Int? // inicialmente nil, pois n√£o atribu√≠mos nenhum valor

repeat {
    intOpcional = funcQuePodeRetornarUmInt()
} while intOpcional == nil


/* üí° Por Array (matriz, vetor), apenas entendam como um grupo de elementos (valores). Veremos mais defini√ß√µes na sequ√™ncia do m√≥dulo.

O trecho de c√≥digo acima ir√° exaustivamente chamar nossa fun√ß√£o funcQuePodeRetornarUmInt() at√© que ela retorne um Int e n√£o nil ! Esse comportamento √© atingido com o uso do repeat-while.

Agora, suponha que queremos iterar por um Array de N elementos. Para isso podemos utilizar um while para nos auxiliar ou, como veremos mais √† frente, um for. */

// Exemplo de while: suponha que "vetor" seja uma cole√ß√£o (array) de N elementos, vamos 
// imprimir todos os valores de "vetor"

var i = 0

while i < N {
    print("O elemento atual vale \(vetor[i])")
    i += 1
}


/* N√£o se preocupe com esse print diferente, onde adicionamos o valor de vetor na posi√ß√£o i com o uso de interpola√ß√£o de 
strings (esse ‚Äú(‚Ä¶)‚Äù no meio da String √© um operador de interpola√ß√£o). Apenas entenda que ser√£o impressas N linhas e cada uma delas 
ser√° iniciada pela String ‚ÄúO elemento atual vale‚Äù seguida do valor do elemento propriamente dito. Iremos ver mais a fundo interpola√ß√£o 
de strings e Arrays no pr√≥ximo cap√≠tulo. Perceba que no exemplo acima utilizamos a estrutura while condi√ß√£o { comandos } para nos auxiliar 
a percorrer todos os elementos do vetor.

Apesar de muito √∫til em outras situa√ß√µes, para o problema de se percorrer um vetor, essa n√£o √© a maneira mais elegante de fazer 
tal opera√ß√£o em Swift, pois temos um comando muito poderoso chamado for que nos auxiliar√° com isso: */

// Exemplo de for: suponha que "vetor" seja uma cole√ß√£o (array) de N elementos, vamos 
// imprimir todos os valores do "vetor"

for elem in vetor {
    print("O elemento atual vale \(elem)")
}


/* Perceba qu√£o poderoso √© esse comando nesse formato. Com ele n√£o precisamos mais incrementar a vari√°vel 
de controle i nem a inicializar; n√£o precisamos indexar o vetor com i a cada itera√ß√£o, e melhor ainda, 
nem precisamos saber que o vetor tem N elementos! O Swift se encarrega desses detalhes chatos de implementa√ß√£o, 
que deixariam nosso c√≥digo verboso, e se encarrega de percorrer o vetor para n√≥s.

Vale a pena ressaltar que o for pode ser usado com ranges e Strings. Vejamos mais alguns exemplos */

// Exemplo de for com Ranges

for i in 0...2 {
    print("i=\(i)")
}

// ser√£o impressas as linhas:
// i=0
// i=1
// i=2

for i in 0..<2 {
    print("i=\(i)")
}

// ser√£o impressas as linhas:
// i=0
// i=1


/* Novamente estamos utilizando ranges com as express√µes ‚Äú‚Ä¶‚Äù e ‚Äú..<‚Äù. 
A primeira inclui o elemento final do range, enquanto a segunda n√£o.

Vamos treinar um pouco do que revisamos antes de iniciar o pr√≥ximo cap√≠tulo:

Crie um algoritmo que complete a sequ√™ncia 1, 3, 5, 7, _ , at√© seu d√©cimo elemento, declarando o fator de crescimento 
em uma constante e imprimindo o pr√≥ximo sempre em uma vari√°vel chamada auxiliar. */

/*Criei um algoritmo que complete a sequencia 1, 3, 5, 7, ___ , 
at√© seu d√©cimo elemento, declarando o fator de crescimento em uma constante
e imprimindo o pr√≥ximo sempre em uma vari√°vel chamada auxiliar.*/

let fator = 2
var auxiliar = 1

for i in 0..<10{
    print (auxiliar)
    auxiliar += fator
}