/* Existem tr√™s estruturas muito importantes no Swift quando falamos em comandos condicionais: operador tern√°rio, if-else e switch.

Vejamos primeiramente como funciona o operador tern√°rio. Trata-se de um operador que pode ser 
utilizado com fins de legibilidade para atribuir um valor dependendo de uma condi√ß√£o, a uma vari√°vel ou a uma constante. 
Temos nesse comando, um resultado atribu√≠do no caso de a condi√ß√£o ser verdadeira e um outro resultado para o caso contr√°rio. */

let resultado = (1 > 2) ? "1 √© maior que 2" : "1 n√£o √© maior que 2"
print(resultado) // ser√° impresso "1 n√£o √© maior que 2"

/* O exemplo acima utiliza o operador tern√°rio para gerar a constante resultado. Perceba que dois valores s√£o 
poss√≠veis para serem atribu√≠dos √† constante. S√£o eles: ‚Äú1 √© maior que 2‚Äù e ‚Äú1 n√£o √© maior que 2‚Äù. 
Essas strings s√£o atribu√≠das √† resultado mediante a checagem da condi√ß√£o 1 > 2, e como essa express√£o √© false 
a segunda String √© retornada e atribu√≠da √† resultado. Nos casos de uso do tern√°rio, onde a condi√ß√£o checada seja verdadeira, 
o valor da primeira express√£o ap√≥s o ‚Äú?‚Äù √© que √© retornado e atribu√≠do √† constante ou vari√°vel.

Esse tipo de estrutura, apesar de poss√≠vel, n√£o √© sempre a melhor escolha para se tratar fluxos de execu√ß√£o condicionais em nossos programas. 
Comandos mais comuns a desenvolvedores de software s√£o o if e o else para tratar condi√ß√µes. */

let temperatura = 21

if temperatura > 30 {
    print("Est√° muito quente!")
} else if temperatura > 20 {
    print("Est√° confort√°vel.")
} else {
    print("Est√° frio!")
}

/* A estrutura b√°sica do if e do else √© como ilustra o exemplo acima. Perceba que os par√™nteses s√£o opcionais para as condi√ß√µes em Swift, 
ou seja, n√£o somos obrigados a escrever if (temperatura > 30) {‚Ä¶; podemos omitir os par√™nteses apesar de seu uso ser opcional e em alguns casos, 
denotar a ordem em que as opera√ß√µes condicionais devem ser checadas. No exemplo anterior, ser√° impresso ‚ÄúEst√° confort√°vel‚Äù. 
Esse resultado ocorre pois, a primeira condi√ß√£o (temperatura > 30) √© testada e resulta em false (temperatura vale 21, no exemplo), 
logo o bloco do primeiro if n√£o √© executado. A segunda condi√ß√£o (temperatura > 20), por sua vez, resulta em true, afinal 21 √© realmente maior que 20, 
por isso os comandos dentro das chaves dessa segunda condi√ß√£o s√£o executados. Imagine que temperatura fosse 10, nesse caso todas as condi√ß√µes testadas 
resultariam em false e, portanto, seria executado o bloco do else da pen√∫ltima linha do exemplo.

Uma outra maneira de se trabalhar com condicionais, √© o comando switch: */

let temperatura = 21

switch temperatura {
case 30:
    print("Trinta graus.")
case 29:
    print("Vinte e nove graus.")
default:
    print("Outra temperatura.")
}

/* Perceba que o switch em Swift n√£o precisa de break ao fim de cada bloco de condi√ß√£o. Al√©m disso, o caso default em Swift √© obrigat√≥rio; 
se n√£o for definido, gera um erro de compila√ß√£o. Lembre-se, Swift √© seguro e quer evitar ao m√°ximo que o programador cometa erros. 
Os switches em Swift podem ser ainda mais elaborados. Veja, por exemplo, um caso onde utilizamos um intervalo (range) dentro das condi√ß√µes: */

let temperatura = 29

switch temperatura {
case 30...50:
    // 30...50 define um intervalo (tipo Range) que vai de 30 at√© 50 (inclusive)
    print("Muito quente!")
case 29:
    // temperatura exatamente igual a 29 graus
    print("Vinte e nove graus.")
case 20..<29:
    // 20..<29 define um Range que vai de 20 at√© 28 (29 √© exclu√≠do nesse caso)
    print("Temperatura confort√°vel.")
default:
    print("Outra temperatura.")
}

/* N√£o somente ranges podem ser utilizados, mas podemos checar valores de Enums, Strings, Caracteres, tornando os switches em Swift altamente poderosos!

üí° Por Enum, apenas conceituem como um grupo de constantes. Veremos mais defini√ß√µes na sequ√™ncia do m√≥dulo. */