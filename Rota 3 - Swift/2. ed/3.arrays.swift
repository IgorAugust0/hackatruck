/* Quando queremos trabalhar com vetores, que s√£o cole√ß√µes de dados indexadas por inteiros de 0 √† N-1 (onde N √© o 
tamanho da cole√ß√£o), utilizamos os Arrays. Talvez, voc√™ j√° tenha trabalhado em alguma linguagem onde os Arrays 
podem conter qualquer tipo de elemento. Por exemplo, poder√≠amos misturar inteiros e strings em uma 
cole√ß√£o (esse √© o caso de Javascript ou Ruby). A linguagem Swift, como j√° comentamos, √© muito segura! 
Dessa maneira, os Arrays precisam ser fortemente tipados, ou seja, buscamos ter elementos dos mesmos tipos em nossas cole√ß√µes. */

let pares: Array<Int> = [2, 4, 6, 8]
let impares = [1, 3, 5, 7] 
// Perceba que o compilador ir√° inferir o tipo Array<Int> na constante impares.
// Esse tipo tamb√©m pode ser definido como Array[Int] (entre chaves e n√£o somente entre <>) em Swift.

/* Assim como no caso das strings, Arrays declarados com let s√£o imut√°veis, enquanto Arrays declarados com var s√£o mut√°veis: */

let paresImutavel = [2, 4, 6, 8]
paresImutavel.append(10) //Erro! Array imut√°vel n√£o pode receber novos elementos
var imparesMutaveis = [1, 3, 5, 7]
imparesMutaveis.append(9) // Agora, imparesMutaveis = [1, 3, 5, 7, 9]

/* Perceba a utiliza√ß√£o do comando ‚Äúappend‚Äù chamado com o uso de um ‚Äú.‚Äù ap√≥s o nome de nosso array. 
Chamamos isso de envio da mensagem ‚Äúappend‚Äù (ou chamada do m√©todo append), 
respons√°vel por adicionar ao final do Array (no caso, imparesMutaveis) o valor passado como par√¢metro.

Veja um caso de erro onde tentamos adicionar uma String a um Array de Int. */

var imparesMutaveis = [1, 3, 5, 7]
imparesMutaveis.append("nove") // Erro! O parametro "nove" √© uma String e n√£o um Int

/* Como imparesMutaveis √© do tipo Array<Int> (uma cole√ß√£o de inteiros) ele n√£o pode receber uma String, 
por isso um erro no trecho de c√≥digo anterior.

Veja a seguir que podemos utilizar o for-in ou um for tradicional, auxiliado pelo m√©todo count de um 
Array (que retorna √† quantidade de elementos que ele possui) para percorrer os elementos de um Array: */

var imparesMutaveis = [1, 3, 5, 7]
imparesMutaveis.append(9)

for impar in imparesMutaveis {
    print(impar)
}

// Ser√° impresso:
// 1
// 3
// 5
// 7
// 9

// Caso prefira tamb√©m pode-se utilizar um for com 
// a quantidade de elementos do Array, obtida com 
// o m√©todo count
for i in 0 ..< imparesMutaveis.count {
    print(imparesMutaveis[i])
}

/* J√° sabemos como adicionar elementos a um Array e tamb√©m como percorr√™-los, por√©m, como podemos alterar 
uma posi√ß√£o que n√£o seja a √∫ltima ou trocar um elemento em um Array? Para isso, utilizamos o √≠ndice da 
seguinte forma ‚Äúarray[√≠ndice]‚Äù (chamada de indexa√ß√£o do Array) para nos auxiliar. ‚Äúarray[√≠ndice]=‚Äù pode ser 
utilizada para alterar um elemento na posi√ß√£o √≠ndice, enquanto ‚Äúarray[√≠ndice]‚Äù pode ser utilizada para buscar 
o elemento de array que esteja na posi√ß√£o √≠ndice. Veja alguns exemplos de utiliza√ß√£o: */

// Exemplo de indexa√ß√£o de Array
var imparesMutaveis = [1, 3, 5, 7]
let segundoImpar = imparesMutaveis[1] 
// Arrays v√£o de 0 at√© N-1 (onde N √© o tamanho)
print("O segundo impar na cole√ß√£o imparesMutaveis √© \(segundoImpar)")

// Exemplo de altera√ß√£o de elemento em determinado indice de um Array
imparesMutaveis[0] = 9
imparesMutaveis[1] = 11
imparesMutaveis[2] = 13
imparesMutaveis[3] = 15
// imparesMutaveis agora √© [9, 11, 13, 15]

/* üí° A quantidade de posi√ß√µes de um Array sempre √© contabilizada a partir do 0 (zero). 
Dessa forma, um Array de 9 posi√ß√µes tem √≠ndices de 0 √† 8. 

Em Swift, h√° outras formas muito comuns de se instanciar Arrays e concatenar elementos a eles. 
Veja essas formas alternativas no seguinte trecho de c√≥digo: */

// Esse √© um jeito de se iniciar um array de inteiros vazio:
var pares = [Int]() // mais conciso que Array<Int>()

// E esse √© outro jeito de se concatenar elementos:
pares += [2, 4, 6, 8, 10]
pares += [12, 14, 16, 18, 20]
print(pares)
// Ser√° impresso: "[2, 4, 6, 8, 10, 12, 14, 16, 18, 20]"

// Esse √© outro jeito de se iniciar um array de inteiros vazio:
var impares = Array<Int>()
impares += [1, 3, 5, 7]
print(impares)
// Ser√° impresso: "[1, 3, 5, 7]"

//Crie um Array com o nome de 3 pessoas e um segundo Array com as respectivas idades. 
//Utilizando os la√ßos de repeti√ß√µes j√° vistos crie a seguinte estrutura de frase:
//‚ÄúA 1a pessoa tem o nome _________ e a idade __________‚Äù.
//‚ÄúA 2a pessoa tem o nome _________ e a idade __________‚Äù.

var nomes = [String]()
// var nomes: ["Jo√£o", "Maria", "Jos√©"]
var idades = [Int]()
// var idades: [20, 30, 40]

nomes += ["Jo√£o", "Maria", "Jos√©"]
idades += [20, 30, 40]

for i in 0 ..< nomes.count {
    print("A \(i + 1)a pessoa tem o nome \(nomes[i]) e a idade \(idades[i])")
}

// for-in usando firstIndex(of: ) para pegar o √≠ndice da primeira ocorr√™ncia do nome e da idade 
// ! para for√ßar o unwrap do optional e + 1 para come√ßar a contagem do 1
for nome in nomes {
    print("A \(nomes.firstIndex(of: nome)! + 1)a pessoa tem o nome \(nome) e a idade \(idades[nomes.firstIndex(of: nome)!])")
}