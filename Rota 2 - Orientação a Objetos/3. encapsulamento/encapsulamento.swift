/*
Na programa√ß√£o orienta√ß√£o a objetos dizemos que um objeto possui uma interface, ou seja, o que ele conhece e o que sabe fazer. 
Por meio da interface √© poss√≠vel saber quais servi√ßos podem ser executados e tamb√©m as mensagens que o objeto recebe. 
Atrav√©s do conceito de encapsulamento podemos definir e limitar o acesso por meio de diferentes n√≠veis para as classes, atributos e m√©todos.

Utilizamos encapsulamento quando queremos definir como nossas classes, propriedades e m√©todos ser√£o acessados por outras classes 
ou objetos dentro da aplica√ß√£o. Este imp√µe diferentes restri√ß√µes de acesso direto √†s informa√ß√µes trazendo mais seguran√ßa, 
integridade aos dados e controle durante o desenvolvimento, pois quando chamamos um m√©todo, n√£o √© necess√°rio saber o que ele faz, 
mas sim como cham√°-lo. A fim de nos beneficiarmos desse cen√°rio com diferentes possibilidades, 
utilizamos algumas palavras reservadas para indicar e delimitar quem acessa o que, fazendo com que as classes, atributos e m√©todos, 
sejam vis√≠veis somente onde √© estritamente necess√°rio.

Existem tr√™s n√≠veis de encapsulamento no Swift:

‚Ä¢ public ‚Äì Permite acesso a qualquer outro elemento e por qualquer fun√ß√£o.

‚Ä¢ internal ‚Äì Permite acesso apenas dentro da pr√≥pria classe e nas classes herdeiras. 
Aprofundaremos sobre este conceito no pr√≥ximo cap√≠tulo (4 ‚Äì Heran√ßa).

‚Ä¢ private ‚Äì Permite acesso apenas pela pr√≥pria classe.

Um exemplo de encapsulamento √© a vari√°vel saldoBancario de um cliente de banco. 
Ela n√£o pode ter um acesso p√∫blico, sen√£o qualquer parte do programa poderia mudar o seu valor. 
Neste caso, definimos a vari√°vel como privada para que seu valor seja alterado usando somente os 
mecanismos da classe que tem suas devidas travas e regras para cada opera√ß√£o (saque, transfer√™ncia, extrato, etc.).

Nota: por padr√£o, o n√≠vel de encapsulamento √© internal.

Vamos a um exemplo:

Criaremos uma classe Carro, com uma das propriedades como private, que pode ser acessada apenas pela pr√≥pria classe, 
e tentaremos alter√°-la com uma nova atribui√ß√£o por meio de um objeto:
*/

class Carro {
    var modelo: String = "Gool"

    // Criamos a propriedade privada
    private var qtdeCombustivel: Float = 25

    func quantidadeCombustivel()->Void{
        print(qtdeCombustivel)
    }
}

// Criamos o objeto da classe
var carro1 = Carro()

// Tenta fazer a altera√ß√£o da qtdeCombustivel, atribuindo diretamente no atributo qtdeCombustivel       
carro1.qtdeCombustivel = 35
// Resultado: erro

/*
Obtivemos um erro, pois nossa propriedade qtdeCombustivel √© private, 
e n√£o pode ser alterada por nada que n√£o seja da pr√≥pria classe.

Dissemos anteriormente que nossos conceitos de encapsulamento podem ser aplicados tanto a atributos como a m√©todos, 
ent√£o vamos nos aproveitar disso para conseguir fazer essa altera√ß√£o de valor. Conseguem pensar em uma solu√ß√£o vi√°vel 
para modificar o valor da vari√°vel qtdeCombustivel?
*/

class Carro {
    var modelo: String = "Gool"

    // Criamos a propriedade privada
    private var qtdeCombustivel: Float = 25

    func quantidadeCombustivel()->Void{
        print(qtdeCombustivel)
    }

    // Criamos um m√©todo que abastece o carro
    func abastecer(qtde: Float)->Void{
        qtdeCombustivel += qtde
    }
}

// Criamos o objeto da classe
var carro1 = Carro()

// Chamamos o m√©todo abastecer
carro1.abastecer(qtde: 35)

// Chamamos o m√©todo quantidadeCombustivel
carro1.quantidadeCombustivel()
// Resultado: 60.0

/* 
Sim, com o uso de um m√©todo! 
Utilizando um m√©todo que √© acess√≠vel externamente conseguimos modificar os valores atribu√≠dos na classe.

Encapsular n√£o √© algo mandat√≥rio para o funcionamento do programa, mas √© uma boa pr√°tica para que nossa estrutura 
seja s√≥lida e nossos objetos sejam seguros do ponto de vista de escrita e leitura, pois ambas as opera√ß√µes s√≥ ser√£o 
feitas de dentro da pr√≥pria classe se forem declarados como privados.

üí° O encapsulamento do Swift funciona apenas se a classe e sua inst√¢ncia estiverem em arquivos separados. 
Apenas para efeito de ensino, mantivemos no mesmo simulador.
*/