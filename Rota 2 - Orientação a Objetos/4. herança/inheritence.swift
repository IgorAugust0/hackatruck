/*
Heran√ßa √© um conceito muito importante em Orienta√ß√£o a Objetos (OO), pois permite uma melhor organiza√ß√£o 
e reaproveitamento de c√≥digo. Por meio desse conceito, as classes filhas compartilham os atributos 
e m√©todos da classe m√£e.

Os apelidos ‚Äúclasse pai‚Äù, ‚Äúclasse m√£e‚Äù, ‚Äúsupertipo‚Äù, ‚Äúsuperclasse‚Äù e ‚Äúclasse base‚Äù s√£o a mesma coisa, 
ent√£o n√£o se assuste ao ver algum desses termos, pois todos se referem √† classe original a ser herdada.

J√° os termos ‚Äúclasse filha‚Äù, ‚Äúsubtipo‚Äù, ‚Äúsubclasse‚Äù e ‚Äúclasse derivada‚Äù tamb√©m s√£o sin√¥nimos, 
e se referem √†s classes que herdam os atributos e m√©todos de uma superclasse.

Para dizer que uma classe herda o comportamento de outra, usamos a palavra ‚Äúestende‚Äù. 
No exemplo abaixo veremos ‚ÄúCarro estende Veiculo‚Äù, onde a classe Carro √© a subclasse e a classe Veiculo 
√© a superclasse. Desse modo, Carro ter√° todos os atributos p√∫blicos da classe Veiculo, e tamb√©m poder√° 
utilizar seus m√©todos p√∫blicos (ou at√© mesmo modific√°-los, se necess√°rio, conforme veremos no cap√≠tulo de Polimorfismo). 
√â justamente por isso que dizemos que as classes filhas herdam o comportamento das classes m√£es, 
e tamb√©m podem acrescentar outras caracter√≠sticas (atributos) ou novas funcionalidades (novos m√©todos). 
√â importante notar que heran√ßa tamb√©m segue os princ√≠pios de visibilidade e encapsulamento, portanto, 
o que √© privado em uma classe n√£o ser√° observado nas suas subclasses.

O conceito de heran√ßa est√° claramente relacionado com o conceito de ‚Äú√© um(a)‚Äù. No nosso exemplo anterior, 
Carro √© um Ve√≠culo. A heran√ßa tamb√©m se relaciona com os conceitos:

Generaliza√ß√£o - Quando partimos de uma classe e chegamos √† sua superclasse.

Especializa√ß√£o - Quando partimos de uma superclasse e chegamos na sua subclasse.

Assim, Carro √© uma especializa√ß√£o de Veiculo e Veiculo √© uma generaliza√ß√£o de Carro. Do mesmo modo ser√° com qualquer outro meio de transporte se definirmos que ‚ÄúMeioDeTransporte estende Veiculo‚Äù. Isso exemplifica outro ponto relevante: uma superclasse pode ser estendida por infinitos subtipos, no entanto, um subtipo NORMALMENTE herda as caracter√≠sticas de uma √∫nica superclasse por vez.

üí° √â poss√≠vel herdar mais de uma superclasse com o uso de Protocolos, mas n√£o se preocupem com isso neste momento, apenas saibam que √© poss√≠vel!

Vejamos nosso exemplo acima em c√≥digo:
*/

class Veiculo{

    var pneus: String?
    var assentos: String?
    var motor: String?

    // ?? = se for nulo, coloca o valor padr√£o, nesse caso, " "
    func desc() {
        print("N√∫mero de rodas \(self.pneus ?? " "), N√∫mero de Assentos \(self.assentos ?? " "), Potencia Motor \(self.motor ?? " ")") 
    }
}

class Carro: Veiculo {
    var tipo: String?

    override func desc() {
        super.desc()
        print("Tipo \(self.tipo ?? " ")") 
    }
}

class Caminhao: Veiculo {
    var tipo: String?
    var eixos: Int?

    override func desc() {
        super.desc()
        print("Tipo \(self.tipo ?? " "), N√∫mero de Eixos \(self.eixos ?? 0)") 
    }
}

class Motocicleta: Veiculo {
    var cilindradas: Int?

    override func desc() {
        super.desc()
        print("Cilindradas \(self.cilindradas ?? 0)") 
    }
}

class Aviao: Veiculo {
    var numMotores: Int?

    override func desc() {
        super.desc()
        print("N√∫mero de Motores \(self.numMotores ?? 0)") 
    }
}

var c = Caminhao()
c.pneus = "TY607 295/80 R22,5"
c.assentos = "3 Lugares"
c.motor = "V8"
c.tipo = " Ca√ßamba "
c.eixos = 5
c.desc()

/*
Vamos treinar?

Corrija os erros, instancie um objeto e adicione valores para Motocicleta e Avi√£o. 
Usem como exemplo o c√≥digo disponibilizado no exemplo anterior:

class Veiculo{

    var pneus: String?
    var assentos: String?
    var motor: String?
    
    func desc() {
        print("N√∫mero de rodas \(self.pneus ?? " "), N√∫mero de Assentos \(self.assentos ?? " "), Potencia Motor \(self.motor ?? " ")") 
    }
}


class Motocicleta {
    var cilindradas: Int?
}

class Aviao, Veiculo {
    var numMotores: Int?
}


*/

class Veiculo2{
    var pneus: String?
    var assentos: String?
    var motor: String?
    
    func desc() {
        print("N√∫mero de rodas \(self.pneus ?? " "), N√∫mero de Assentos \(self.assentos ?? " "), Potencia Motor \(self.motor ?? " ")") 
    }
}

class Motocicleta: Veiculo2 {
    var cilindradas: Int?
}

class Aviao: Veiculo2 {
    var numMotores: Int?
}


