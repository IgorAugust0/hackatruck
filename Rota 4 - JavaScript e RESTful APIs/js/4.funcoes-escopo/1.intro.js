// FUN√á√ïES E ESCOPO - JAVASCRIPT
// FUN√á√ïES

// Uma fun√ß√£o √© um conjunto de express√µes encapsuladas em um bloco de c√≥digo. Para declarar uma fun√ß√£o basta usar a palavra-chave function, definir um identificador para a fun√ß√£o, abrir e fechar par√™nteses e abrir e fechar chaves.

// O identificador da fun√ß√£o segue as mesmas regras para nomear vari√°veis.

// Para executar a fun√ß√£o posteriormente, basta se referenciar a ela pelo seu identificador seguido de par√™nteses.

function cumprimentar() {
  console.log("Ol√°, seja bem-vindo!");
}
cumprimentar(); // Ol√°, seja bem-vindo!

// As fun√ß√µes podem receber par√¢metros, ou seja, valores que ser√£o utilizados na execu√ß√£o das opera√ß√µes da fun√ß√£o. Os par√¢metros que a fun√ß√£o recebe s√£o definidos entre os par√™nteses da declara√ß√£o da fun√ß√£o e separados por v√≠rgula.

function cumprimentar(nome, sobrenome) {
  console.log("Ol√°, seja bem-vindo " + nome + " " + sobrenome + "!");
}

// As fun√ß√µes podem produzir algum valor e devolver esse valor ao final de sua execu√ß√£o. Esse valor √© o retorno da fun√ß√£o. N√≥s definimos o retorno da fun√ß√£o com a palavra-chave return.

function nomeCompleto(nome, sobrenome) {
  return nome + " " + sobrenome;
}
var nome = nomeCompleto("Jo√£o", "da Silva");

// Os passos para declarar uma fun√ß√£o s√£o:

// Escrever a palavra chave function.

// Definir o identificador da fun√ß√£o e o nome da fun√ß√£o.

// Entre par√™nteses, definir os par√¢metros caso voc√™ precise de informa√ß√µes externas.

// Abrir e fechar as chaves onde ficar√£o as instru√ß√µes a serem executadas.

// Escrever as instru√ß√µes da fun√ß√£o dentro das chaves.

// Por fim, definir o retorno da fun√ß√£o, caso a fun√ß√£o retorne algum valor.

// üí° Dica: Para melhor visualiza√ß√£o do c√≥digo e mant√™-lo ‚Äúlimpo‚Äù, √© sugerido que utilize template string para concatena√ß√£o e interpola√ß√£o das Strings. Template literals s√£o literais string que permitem express√µes embutidas. Voc√™ pode usar string multilinhas e interpola√ß√£o de string com elas. Elas eram chamadas "template strings" nas vers√µes anteriores √† especifica√ß√£o ES2015.

// Veja o exemplo utilizando o template literals:

function nomeCompleto(nome, sobrenome) {
  return `${nome} ${sobrenome}`;
}

function cumprimentar(nomeCompleto) {
  console.log(`Ol√°, seja bem-vindo ${nomeCompleto}!`);
}

var nome = nomeCompleto("Jo√£o", "da Silva");
cumprimentar(nome);
